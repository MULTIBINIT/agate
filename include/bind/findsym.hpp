/**
 * @file findsym.hpp
 *
 * @brief Interface to the webpage to get symetry analysis
 *
 * @author Jordan Bieder <jordan.bieder@cea.fr>
 *
 * @copyright Copyright 2014 Jordan Bieder
 *
 * This file is part of AbiOut.
 *
 * AbiOut is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AbiOut is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AbiOut.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef FINDSYM_HPP
#define FINDSYM_HPP

#ifdef _WIN32
#include "base/win32.hpp"
#endif

#ifdef HAVE_CONFIG_H
#include "config.h"
#undef HAVE_CONFIG_H
#endif


#include <sstream>
#include <string>
#include <vector>
#include "base/geometry.hpp"


/**
 * Stock the minimum needed data to interogate findsym
 * Reduce symetries and eventually creat a cif file.
 */
class Findsym {

  private :

    const std::string findsym_url  = "http://stokes.byu.edu/iso/findsymform.php"; ///< URL of the php page to send the data.

    std::string                     _findsym;   ///< Path to the executable of findsym
    bool                            _isset;     ///< Did we interogate FINDSYM ?
    bool                            _mendeleev; ///< Do we convert _typat to named name.
    std::string                     _title;     ///< Title for the file to be produced.
    double                          _tolerance; ///< Tolerance for the symetry analysis.
    geometry::mat3d                 _rprim;     ///< Cartesian coordinates of the basis vectors of the lattice. Units are arbitrary.
    unsigned                        _natom;     ///< Number of atoms in the unit cell.
    std::vector<int>                _typat;     ///< Type of each atom.
    std::vector<geometry::vec3d>    _xred;      ///< coordinates (unitless) in the above basis.
    std::stringstream               _result;    ///< Get the result of findsym in this stream.
    std::string                     _cif;       ///< Stock the CIF file generated by FINDSYM

    /**
     * Callback function to get data from the curl query
     * @param ptr String containing the result of the query. 
     *            Its size is size*nmemb.
     * @param size size of I don't really know what
     * @param nmemb more or less the size of char that can be read.
     * @param strstream Data to use inside the function (to be casted).
     * @return The number of char that we read. If different than what curl expects us to read -> error
     */
    static size_t writeback(char *ptr, size_t size, size_t nmemb, void *strstream);

  public :

    /**
     * Constructor : initializes with empty data.
     */
    Findsym();

    /**
     * Destructor : nothing.
     */
    ~Findsym();

    /**
     * Getter
     * @return _title.
     */
    std::string title() const ;

    /**
     * Getter
     * @return _tolerance.
     */
    double tolerance() const ;

    /**
     * Getter
     * @return _rpim.
     */
    geometry::mat3d rprim() const ;

    /**
     * Getter
     * @return _natom.
     */
    unsigned natom() const ;

    /**
     * Getter
     * @return _typat.
     */
    std::vector<int> typat() const ;

    /**
     * Getter
     * @return _xred;
     */
    std::vector<geometry::vec3d> xred() const ;

    /**
     * Getter
     * @return _cif;
     */
    const std::string& cif() const ;

    /**
     * Setter
     * @param title The title.
     */
    void title(const std::string& title);

    /**
     * Setter
     * @param tol The tolerance.
     */
    void tolerance(double tol);

    /**
     * Setter
     * @param rprim The primitive cell.
     */
    void rprim(const geometry::mat3d& rprim);

    /**
     * Setter
     * @param natom Number of atoms in the cell.
     */
    void natom(unsigned natom);

    /**
     * Setter
     * @param typat The type of each atom in the cell.
     * @param meaningfull True if typat is the znucl, false if it is juste numbers
     */
    void typat(const std::vector<int>& typat, bool meaningfull = true);

    /**
     * Setter
     * @param xred Position of each atom.
     */
    void xred(const std::vector<geometry::vec3d>& xred);

    /**
     * Send a request to findsym server and keep the output in _result.
     * Do not parse the result here.
     */
    void findsym();

};

#endif  // FINDSYM_HPP
